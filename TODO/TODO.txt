TODO:

21.05.2018
One callback function for all ble features or Four callbacks functions each for other BLE role: Broadcaster, Observer, Server, Client.
Each BLE role can provide app by different wireless functionality.
Typedef Struct for: ROLE choice (in case of one callback), FEATURE chice.
ROLE choice:
	-Observer
	-Broadcaster
	-Server
	-Client

FEATURE choice:
	-Advertising :
		*Broadcast
		*Streaming
	-Scaning
	-Notify
	-Notify with response
	-Write

Data interchange :
	Globals data struct, when multitasking - data must be bloced for calculate time

Data block options:
	-Blocking		- If you want to block the specific data when one task is calculating
	-None blocking	- Non blocking option
	-Scharing		- If you don't want to block the data by one task you can use doubled data matrix - first place for calculating data, second place for old data
	-Block Sharing - Like in sharing options but both of position are bloced as long as both are different

	struct:
		+bool block

		+uint8_t data			<- in case of using blocking/noneblocking method
		+uint16_t share_data 		<- in case of using sharing mathod
		+origin_type_t origin		<- data origin (peripheral device)
		+bool (*block_data)()
		+bool (*share_data)()
		+*uint8_t (*read_data)()
		+bool (*block_off)()
,

typedef enum{
	ACCELEROMETRER,
	CURRENT,
	BLE_NOTIFICATION,
	BLE_ADVERTISING,
	BLE_WRITE,
	NONE;
}origin_type_t


*******************************************************************************
data saving:
	global data blocking
	data save,
	helper variables updating,
	block off.

SEGGER SystemView:
	-first, include "SEGGER_SYSVIEW.h".
	-systemConfiguration();
	-SEGGER_SYSVIEW_Conf();
	-run multitasking

	Probably, you need to modify SEGGER_SYSVIEW_Conf.h file, and run ISR with SEGGER_SYSVIEW_Start/Stop <- to check.


	**************************

	how to call server initialize ?
	
	optionalParameters - structure with parameters.
	struct optionalParameters{
		service_type_t 					serviceTable[servicesAmount];
		...
	}; 
	
	makeRole ( void ( *functionInit )( void ), optionalParameters);
	
	makeRole ( ... )
	{

		callback run with optionalParameters
		
		return something ?

	}

	void serverInit ( void )
	{
		/* Configure server */

		/* Apply the services */

		/* Apply the descriptions */

		/* want to return something ? */
	}

	struct optionalParameters configData = {.serviceTavle[0] = xxx, ...};
	
	makeRole ( serverInit, configData );


